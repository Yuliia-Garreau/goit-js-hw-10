{"version":3,"file":"2-snackbar.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst form = document.querySelector('.form');\nconst inputDelay = document.querySelector(\"input[name='delay']\");\nconst button = document.querySelector('button');\n\nform.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const delay = event.target.elements.delay.value;\n  console.log(delay);\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const selectedBtnFulfilled = document.querySelector(\n        \"input[value='fulfilled']:checked\"\n      );\n      const selectedBtnRej = document.querySelector(\n        \"input[value='rejected']:checked\"\n      );\n      if (selectedBtnFulfilled) {\n        resolve(`✅ Fulfilled promise in ${delay} ms`);\n        iziToast.success({\n          title: 'OK',\n          message: '✅ Fulfilled promise in ${delay}ms',\n        });\n      } else {\n        reject(`❌ Rejected promise in ${delay} ms`);\n        iziToast.error({\n          title: 'Error',\n          message: '❌ Rejected promise in ${delay} ms',\n        });\n      }\n    }, delay);\n  });\n}\n// const makePromise = ({ value, delay, shouldResolve = true }) => {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(value);\n//       } else {\n//         reject(value);\n//       }\n//     }, delay);\n//   });\n// };\n\n// const makePromise = ({ value, delay, shouldResolve = true }) => {\n//   return new Promise((resolve, reject) => {\n// \t   setTimeout(() => {\n// \t\t\t\tif(shouldResolve) {\n// \t\t\t\t\tresolve(value)\n// \t\t\t\t} else {\n// \t\t\t\t\treject(value)\n// \t\t\t\t}\n// \t\t\t}, delay);\n//   });\n// };\n// makePromise({ value: \"A\", delay: 1000 })\n// \t.then(value => console.log(value)) // \"A\"\n// \t.catch(error => console.log(error));\n// makePromise({ value: \"B\", delay: 3000 })\n// \t.then(value => console.log(value)) // \"B\"\n// \t.catch(error => console.log(error));\n// makePromise({ value: \"C\", delay: 2000, shouldResolve: false })\n// \t.then(value => console.log(value))\n// \t.catch(error => console.log(error)); // \"C\"\n\n// // Create promise\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     if (isSuccess) {\n//       resolve('Success! Value passed to resolve function');\n//     } else {\n//       reject('Error! Error passed to reject function');\n//     }\n//   }, 2000);\n// });\n\n// // Registering promise callbacks\n// promise.then(\n//   value => {\n//     console.log(value); // \"Success! Value passed to resolve function\"\n//   },\n//   error => {\n//     console.log(error); // \"Error! Error passed to reject function\"\n//   }\n// );\n\n// // Registering promise callbacks\n// promise\n//   .then(value => {\n//     console.log(value); // \"Success! Value passed to resolve function\"\n//   })\n//   .catch(error => {\n//     console.log(error); // \"Error! Error passed to reject function\"\n//   });\n// // Registering promise callbacks\n// promise\n//   .then(value => console.log(value)) // \"Success! Value passed to resolve function\"\n//   .catch(error => console.log(error)) // \"Error! Error passed to reject function\"\n//   .finally(() => console.log('Promise settled')); // \"Promise settled\"\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     resolve(5);\n//   }, 2000);\n// });\n// promise\n//   .then(value => {\n//     console.log(value); // 5\n//     return value * 2;\n//   })\n//   .then(value => {\n//     console.log(value); // 10\n//     return value * 3;\n//   })\n//   .then(value => {\n//     console.log(value); // 30\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   })\n//   .finally(() => {\n//     console.log('finally');\n//   });\n\n// const fetchUserFromServer = username => {\n//   return new Promise((resolve, reject) => {\n//     // ...\n//   });\n// };\n// fetchUserFromServer('Mango')\n//   .then(user => console.log(user))\n//   .catch(error => console.error(error));\n\n// const fetchUserFromServer = username => {\n//   return new Promise((resolve, reject) => {\n//     console.log(`Fetching data for ${username}`);\n//     setTimeout(() => {\n//       // Change value of isSuccess variable to simulate request status\n//       const isSuccess = true;\n//       if (isSuccess) {\n//         resolve('success value'); // значенням параметра resolve буде колбек-функція методу then()\n//       } else {\n//         reject('error'); // значенням параметра reject буде колбек-функція методу catch()\n//       }\n//     }, 2000);\n//   });\n// };\n// fetchUserFromServer('Mango')\n//   .then(user => console.log(user))\n//   .catch(error => console.error(error));\n\n// new Promise(resolve => resolve(\"success value\"))\n// \t.then(value => console.log(value));\n// \t.catch (error => console.log(error));\n\n//   Promise.resolve(\"success value\");\n// \t.then(value => console.log(value));\n// \t.catch (error => console.log(error));\n\n//     Promise.reject(\"error\");\n// \t.then(value => console.log(value));\n// \t.catch (error => console.log(error));\n\n//     const makeGreeting = guestName => {\n//   if (!guestName) {\n//    return Promise.reject(\"Guest name must not be empty\");\n//   } else {\n// \t\treturn Promise.resolve(`Welcome ${guestName}`);\n// \t}\n// };\n// makeGreeting(\"Mango\")\n//   .then(greeting => console.log(greeting))\n//   .catch(error => console.error(error));\n\n//   const makePromise = ({ value, delay, shouldResolve = true }) => {\n//   return new Promise((resolve, reject) => {\n// \t   setTimeout(() => {\n// \t\t\t\tif(shouldResolve) {\n// \t\t\t\t\tresolve(value)\n// \t\t\t\t} else {\n// \t\t\t\t\treject(value)\n// \t\t\t\t}\n// \t\t\t}, delay);\n//   });\n// };\n// makePromise({ value: \"A\", delay: 1000 })\n// \t.then(value => console.log(value)) // \"A\"\n// \t.catch(error => console.log(error));\n// makePromise({ value: \"B\", delay: 3000 })\n// \t.then(value => console.log(value)) // \"B\"\n// \t.catch(error => console.log(error));\n// makePromise({ value: \"C\", delay: 2000, shouldResolve: false })\n// \t.then(value => console.log(value))\n// \t.catch(error => console.log(error)); // \"C\"\n\n//     new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     resolve('Fulfilled A');\n//   }, 1000);\n// })\n//   .then(value => console.log(value))\n//   .catch(error => console.log(error));\n// new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     resolve('Fulfilled B');\n//   }, 3000);\n// })\n//   .then(value => console.log(value))\n//   .catch(error => console.log(error));\n// new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     reject('Rejected C');\n//   }, 2000);\n// })\n//   .then(value => console.log(value))\n//   .catch(error => console.log(error)); // \"Rejected C\"\n\n//   iziToast.error({\n//     title: 'Error',\n//     message: 'Illegal operation',\n//   });\n\n//   iziToast.success({\n//     title: 'OK',\n//     message: 'Successfully inserted record!',\n//   });\n// iziToast.settings({\n//     timeout: 10000,\n//     resetOnHover: true,\n//     icon: 'material-icons',\n//     transitionIn: 'flipInX',\n//     transitionOut: 'flipOutX',\n//     onOpening: function(){\n//         console.log('callback abriu!');\n//     },\n//     onClosing: function(){\n//         console.log(\"callback fechou!\");\n//     }\n// });\n"],"names":["form","handleSubmit","event","delay","resolve","reject","selectedBtnFulfilled","iziToast"],"mappings":"oFAGA,MAAMA,EAAO,SAAS,cAAc,OAAO,EACxB,SAAS,cAAc,qBAAqB,EAChD,SAAS,cAAc,QAAQ,EAE9CA,EAAK,iBAAiB,SAAUC,CAAY,EAE5C,SAASA,EAAaC,EAAO,CAC3BA,EAAM,eAAc,EACpB,MAAMC,EAAQD,EAAM,OAAO,SAAS,MAAM,MAC1C,QAAQ,IAAIC,CAAK,EAED,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC/C,WAAW,IAAM,CACf,MAAMC,EAAuB,SAAS,cACpC,kCACR,EAC6B,SAAS,cAC9B,iCACA,EACEA,GACFF,EAAQ,0BAA0BD,CAAK,KAAK,EAC5CI,EAAS,QAAQ,CACf,MAAO,KACP,QAAS,mCACnB,CAAS,IAEDF,EAAO,yBAAyBF,CAAK,KAAK,EAC1CI,EAAS,MAAM,CACb,MAAO,QACP,QAAS,mCACnB,CAAS,EAEJ,EAAEJ,CAAK,CACZ,CAAG,CACH"}